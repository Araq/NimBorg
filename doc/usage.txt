-------------------
High-level bindings
-------------------
The quickest way to learn how to use the bindings is to browse the tests.

Python bindings
---------------

* first, import the high-level python bindings into your module:

  import NimBorg/python/high_level

* all nimrod-accessible python objects are wrapped with a reference of
type PPyRef.

* import python modules with a statement such as:

  let py_math = py_import("math")

thus imported, the module is a regular python object.

* evaluate python expressions with eval(), see python/test/test_py_eval.nim

* the operations supported on python objects are:
- member access with the ~ macro (see below)
- subscripted access and assignment, e.g.: person["age"] = person["age"]+1
- basic arithmetic (+, -, *, /, %)
- conversion to string with `$`
- len, repr
- create python lists with py_list()
- create python dicts with py_dict()

* since PPyRef is a reference type, Nimrod doesn't allow the syntax p.x 
where p is a wrapped python objects. Therefore, the macro `~` was created to
permit a similar syntax. For example, if the object p has members x and y, you
can write: echo ~p.x/p.y to print the ratio p.x/p.y.

Lua bindings
------------
See the test for usage examples of the features below:

* first, import the high-level lua bindings into your module:

  import NimBorg/lua/high_level

* all nimrod-accessible lua objects are wrapped with a reference of
type PLuaRef.

* create a lua state object with a call to new_lua_state()

* evaluate lua expressions with eval: state.eval("4+2") returns PLuaRef 
that wraps the number 6.

* create table objects using state.lua_table()

* lua objects support these operations:
- subscripted access and assignment, e.g. person["age"] = person["age"]+1
- function invocation such as f(x, y, z), with implicit conversion of arguments
to lua values.

Low-level bindings
-------------------
The low-level bindings are copies of the bindings those that Andreas Rumpf created, with very small modifications.
The reader is referred to the API documentation of python and lua for comprehensive documentation 
of these bindings.
